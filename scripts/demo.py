#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–∞–±–æ—Ç—ã BillingTariffication-Service
"""

import asyncio
import httpx
from datetime import datetime

class BillingServiceDemo:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –±–∏–ª–ª–∏–Ω–≥–∞"""
    
    def __init__(self, base_url: str = "http://localhost:8001"):
        self.base_url = base_url
        self.internal_key = "super-secret-dev"
        self.headers = {"X-Internal-Key": self.internal_key}
    
    async def demo_health_check(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
        print("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞...")
        
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{self.base_url}/health")
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            if response.status_code == 200:
                data = response.json()
                print(f"   –°—Ç–∞—Ç—É—Å: {data['status']}")
                print(f"   –í–µ—Ä—Å–∏—è: {data['version']}")
            print()
    
    async def demo_check_balance(self, user_id: str = "demo-user-123"):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞"""
        print(f"üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
        
        request_data = {
            "user_id": user_id,
            "units": 5.0
        }
        
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{self.base_url}/internal/billing/check",
                json=request_data,
                headers=self.headers
            )
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            if response.status_code == 200:
                data = response.json()
                print(f"   –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: {data['allowed']}")
                print(f"   –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {data['balance']}")
            print()
    
    async def demo_get_balance(self, user_id: str = "demo-user-123"):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
        print(f"üí≥ –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
        
        async with httpx.AsyncClient() as client:
            response = await client.get(
                f"{self.base_url}/internal/billing/balance?user_id={user_id}",
                headers=self.headers
            )
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            if response.status_code == 200:
                data = response.json()
                print(f"   –ë–∞–ª–∞–Ω—Å: {data['balance']}")
                if data['plan']:
                    print(f"   –ü–ª–∞–Ω: {data['plan']['plan_code']}")
                    print(f"   –°—Ç–∞—Ç—É—Å: {data['plan']['status']}")
            print()
    
    async def demo_credit_balance(self, user_id: str = "demo-user-123"):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
        print(f"‚ûï –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
        
        request_data = {
            "user_id": user_id,
            "units": 100.0,
            "ref": f"demo-credit-{datetime.now().strftime('%H%M%S')}",
            "source_service": "demo",
            "reason": "demo_credit"
        }
        
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{self.base_url}/internal/billing/credit",
                json=request_data,
                headers=self.headers
            )
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            if response.status_code == 200:
                data = response.json()
                print(f"   –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {data['balance']}")
                print(f"   ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {data['tx_id']}")
            print()
    
    async def demo_debit_balance(self, user_id: str = "demo-user-123"):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
        print(f"‚ûñ –°–ø–∏—Å–∞–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
        
        request_data = {
            "user_id": user_id,
            "units": 2.0,
            "ref": f"demo-debit-{datetime.now().strftime('%H%M%S')}",
            "reason": "demo_debit"
        }
        
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{self.base_url}/internal/billing/debit",
                json=request_data,
                headers=self.headers
            )
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            if response.status_code == 200:
                data = response.json()
                print(f"   –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {data['balance']}")
                print(f"   ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {data['tx_id']}")
            elif response.status_code == 403:
                print("   ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
            print()
    
    async def demo_apply_plan(self, user_id: str = "demo-user-123"):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞"""
        print(f"üìã –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
        
        request_data = {
            "user_id": user_id,
            "plan_code": "base750",
            "ref": f"demo-plan-{datetime.now().strftime('%H%M%S')}",
            "auto_renew": False
        }
        
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{self.base_url}/internal/billing/plan/apply",
                json=request_data,
                headers=self.headers
            )
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            if response.status_code == 200:
                data = response.json()
                print(f"   ID –ø–ª–∞–Ω–∞: {data['plan_id']}")
                print(f"   –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {data['new_balance']}")
            elif response.status_code == 404:
                print("   ‚ùå –ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print()
    
    async def demo_idempotency(self, user_id: str = "demo-user-123"):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏"""
        print(f"üîÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
        
        ref = f"idempotency-test-{datetime.now().strftime('%H%M%S')}"
        
        # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤
        request_data = {
            "user_id": user_id,
            "units": 1.0,
            "ref": ref,
            "reason": "idempotency_test"
        }
        
        async with httpx.AsyncClient() as client:
            # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤
            response1 = await client.post(
                f"{self.base_url}/internal/billing/debit",
                json=request_data,
                headers=self.headers
            )
            print(f"   –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ - —Å—Ç–∞—Ç—É—Å: {response1.status_code}")
            
            if response1.status_code == 200:
                data1 = response1.json()
                tx_id1 = data1['tx_id']
                balance1 = data1['balance']
                print(f"   ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {tx_id1}")
                print(f"   –ë–∞–ª–∞–Ω—Å: {balance1}")
            
            # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ —Å —Ç–µ–º –∂–µ ref
            response2 = await client.post(
                f"{self.base_url}/internal/billing/debit",
                json=request_data,
                headers=self.headers
            )
            print(f"   –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ - —Å—Ç–∞—Ç—É—Å: {response2.status_code}")
            
            if response2.status_code == 200:
                data2 = response2.json()
                tx_id2 = data2['tx_id']
                balance2 = data2['balance']
                print(f"   ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {tx_id2}")
                print(f"   –ë–∞–ª–∞–Ω—Å: {balance2}")
                
                if tx_id1 == tx_id2 and balance1 == balance2:
                    print("   ‚úÖ –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                else:
                    print("   ‚ùå –û—à–∏–±–∫–∞ –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏")
            print()
    
    async def run_full_demo(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è BillingTariffication-Service")
        print("=" * 50)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
            await self.demo_health_check()
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            await self.demo_check_balance()
            await self.demo_get_balance()
            await self.demo_credit_balance()
            await self.demo_debit_balance()
            await self.demo_apply_plan()
            await self.demo_idempotency()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–π
            await self.demo_get_balance()
            
            print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
        except httpx.ConnectError:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å—É")
            print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")

if __name__ == "__main__":
    demo = BillingServiceDemo()
    asyncio.run(demo.run_full_demo()) 