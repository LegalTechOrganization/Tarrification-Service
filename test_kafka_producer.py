#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Kafka –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è Billing Service
–°–∏–º—É–ª–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–±—ã—Ç–∏–π –æ—Ç Gateway
"""
import asyncio
import json
import uuid
from datetime import datetime
from aiokafka import AIOKafkaProducer
from aiokafka.errors import KafkaError

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Kafka
KAFKA_BOOTSTRAP_SERVERS = "localhost:9092"

async def send_test_event(producer, topic, event_data):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ"""
    try:
        await producer.send(
            topic=topic,
            value=json.dumps(event_data, default=str).encode('utf-8'),
            key=event_data['request_id'].encode('utf-8')
        )
        print(f"‚úÖ Sent event to {topic}: {event_data['request_id']}")
    except KafkaError as e:
        print(f"‚ùå Failed to send to {topic}: {e}")

async def test_balance_check():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞"""
    event_data = {
        "message_id": str(uuid.uuid4()),
        "request_id": str(uuid.uuid4()),
        "operation": "balance_check",
        "timestamp": datetime.utcnow().isoformat() + "Z",
        "payload": {
            "user_id": "99b37077-1509-4dd6-8a34-635b00cfae62",
            "action": "chat_message",
            "units": 5.0,
            "user_context": {
                "email": "test@example.com",
                "full_name": "Test User",
                "active_org_id": "org-123",
                "org_role": "admin",
                "is_org_owner": True
            },
            "request_metadata": {
                "source_ip": "192.168.1.100",
                "user_agent": "TestAgent/1.0",
                "gateway_request_id": str(uuid.uuid4()),
                "timestamp": datetime.utcnow().isoformat() + "Z"
            }
        }
    }
    return event_data

async def test_debit():
    """–¢–µ—Å—Ç —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤"""
    event_data = {
        "message_id": str(uuid.uuid4()),
        "request_id": str(uuid.uuid4()),
        "operation": "debit",
        "timestamp": datetime.utcnow().isoformat() + "Z",
        "payload": {
            "user_id": "99b37077-1509-4dd6-8a34-635b00cfae62",
            "action": "chat_message",
            "units": 2.5,
            "ref": f"test-msg-{uuid.uuid4()}",
            "reason": "GPT-4 chat message processing",
            "user_context": {
                "email": "test@example.com",
                "full_name": "Test User",
                "active_org_id": "org-123",
                "org_role": "admin",
                "is_org_owner": True
            },
            "operation_context": {
                "service_name": "chat",
                "feature": "gpt4_chat",
                "session_id": "sess-789"
            },
            "request_metadata": {
                "source_ip": "192.168.1.100",
                "user_agent": "TestAgent/1.0"
            }
        }
    }
    return event_data

async def test_credit():
    """–¢–µ—Å—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    event_data = {
        "message_id": str(uuid.uuid4()),
        "request_id": str(uuid.uuid4()),
        "operation": "credit",
        "timestamp": datetime.utcnow().isoformat() + "Z",
        "payload": {
            "user_id": "99b37077-1509-4dd6-8a34-635b00cfae62",
            "action": "manual_credit",
            "units": 100.0,
            "ref": f"payment-{uuid.uuid4()}",
            "reason": "Monthly subscription renewal",
            "user_context": {
                "email": "test@example.com",
                "full_name": "Test User",
                "active_org_id": "org-123",
                "org_role": "admin",
                "is_org_owner": True
            },
            "payment_context": {
                "payment_method": "stripe",
                "payment_intent_id": "pi_1234567890",
                "subscription_id": "sub_abcdef123456"
            },
            "request_metadata": {
                "source_ip": "192.168.1.100",
                "user_agent": "TestAgent/1.0",
                "admin_user_id": "admin-456"
            }
        }
    }
    return event_data

async def test_plan_apply():
    """–¢–µ—Å—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞"""
    event_data = {
        "message_id": str(uuid.uuid4()),
        "request_id": str(uuid.uuid4()),
        "operation": "plan_apply",
        "timestamp": datetime.utcnow().isoformat() + "Z",
        "payload": {
            "user_id": "99b37077-1509-4dd6-8a34-635b00cfae62",
            "plan_id": "enterprise_annual",
            "user_context": {
                "email": "test@example.com",
                "full_name": "Test User",
                "active_org_id": "org-123",
                "org_role": "admin",
                "is_org_owner": True
            },
            "plan_context": {
                "upgrade_from": "pro_monthly",
                "prorate": True,
                "effective_date": datetime.utcnow().isoformat() + "Z"
            },
            "request_metadata": {
                "source_ip": "192.168.1.100",
                "user_agent": "TestAgent/1.0",
                "admin_user_id": "admin-456"
            }
        }
    }
    return event_data

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ Starting Kafka integration test...")
    
    # –°–æ–∑–¥–∞–µ–º producer
    producer = AIOKafkaProducer(
        bootstrap_servers=KAFKA_BOOTSTRAP_SERVERS,
        value_serializer=lambda v: v  # –£–∂–µ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤—Ä—É—á–Ω—É—é
    )
    
    try:
        await producer.start()
        print("‚úÖ Kafka producer started")
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        await asyncio.sleep(2)
        
        print("\nüì§ Sending test events...")
        
        # –¢–µ—Å—Ç 1: –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
        print("\n1Ô∏è‚É£ Testing credit (adding funds)...")
        credit_event = await test_credit()
        await send_test_event(producer, "billing-credit", credit_event)
        await asyncio.sleep(1)
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        print("\n2Ô∏è‚É£ Testing balance check...")
        balance_event = await test_balance_check()
        await send_test_event(producer, "billing-balance-check", balance_event)
        await asyncio.sleep(1)
        
        # –¢–µ—Å—Ç 3: –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
        print("\n3Ô∏è‚É£ Testing debit (spending funds)...")
        debit_event = await test_debit()
        await send_test_event(producer, "billing-debit", debit_event)
        await asyncio.sleep(1)
        
        # –¢–µ—Å—Ç 4: –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–ª–∞–Ω
        print("\n4Ô∏è‚É£ Testing plan apply...")
        plan_event = await test_plan_apply()
        await send_test_event(producer, "billing-plan-apply", plan_event)
        await asyncio.sleep(1)
        
        print("\n‚úÖ All test events sent!")
        print("üìã Summary:")
        print(f"   ‚Ä¢ Credit request: {credit_event['request_id']}")
        print(f"   ‚Ä¢ Balance check: {balance_event['request_id']}")
        print(f"   ‚Ä¢ Debit request: {debit_event['request_id']}")
        print(f"   ‚Ä¢ Plan apply: {plan_event['request_id']}")
        
        print("\n‚è≥ Check billing service logs for processing results...")
        print("   docker compose logs billing-service -f")
        
    except Exception as e:
        print(f"‚ùå Error in test: {e}")
    finally:
        await producer.stop()
        print("\nüõë Kafka producer stopped")

if __name__ == "__main__":
    asyncio.run(main())
